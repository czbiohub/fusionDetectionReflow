/* Reflow workflow for B-cell repertoire sequencing pipeline. Follows Immcantation framework.
   Used for single runs in the reflow/ directory. For batch runs, use bcell_batch.rf from 
   experiments/bcell_initial_runs/.

   author: Gerry Meixiong, CZ Biohub
   date: 7.12.18
 */

param (
	// source_bucket string
	// results_bucket string
	querySeqs string
	// docker_image = "biocontainers/blast"
)

val dirs = make("$/dirs")
val strings = make("$/strings")

func gunzip(compressed dir) dir = 
	exec(image := "ubuntu") (output dir) {"
		for f in {{compressed}}/*.gz; do
			BASE=$(basename $f .gz)
			gunzip -c $f > {{output}}/$BASE
	    done
	"}

func convertFastq(fastq dir) dir =
	exec(image := "alexcoppe/fastx-toolkit-lite") (output dir) {"
	    fastq_to_fasta -i {{fastq}}/*R1_001.fastq -o {{output}}/R1.fasta
	    fastq_to_fasta -i {{fastq}}/*R2_001.fastq -o {{output}}/R2.fasta	
	"}

func makeBlastDB(fasta dir) dir = 
	exec(image := "biocontainers/blast") (output dir) {"
		makeblastdb -in {{fasta}}/R1.fasta -dbtype nucl -parse_seqids -out {{output}}/R1.fasta
		makeblastdb -in {{fasta}}/R2.fasta -dbtype nucl -parse_seqids -out {{output}}/R2.fasta
	"}

func blastn(blastdb dir, queryName string, querySeq file) dir = {
	gene := strings.Split(queryName, "_")[0]
	exec(image := "biocontainers/blast") (output dir) {"
		blastn -db {{blastdb}}/R1.fasta -query {{querySeq}} -out {{output}}/{{gene}}_R1_blastOut
		blastn -db {{blastdb}}/R2.fasta -query {{querySeq}} -out {{output}}/{{gene}}_R2_blastOut
	"}
}

	 //    fastq_to_fasta -i {{fastq}}/*R1_001.fastq -o {{output}}/R1.fasta
	 //    fastq_to_fasta -i {{fastq}}/*R2_001.fastq -o {{output}}/R2.fasta

	 //    makeblastdb -in {{output}}/R1.fasta -dbtype nucl -parse_seqids
		// makeblastdb -in {{output}}/R2.fasta -dbtype nucl -parse_seqids

// Step 1. Presto.
// val presto = make("presto.rf")
// val yaml = presto.CreateYaml(read1_file, run_name)
// val presto_res = presto.PrestoRun(file(read1_file), file(read2_file), 
// 	file(read1_primers), file(read2_primers), yaml, run_name)
// val presto_bucket = dirs.Copy(presto_res,
// 	strings.Join([results_bucket, run_name, "presto"], "/"))

// val geneList = ["alk" "ccdc6" "cd74" "cltc" "eml4" "ezr" "met" "ntrk2" "prkcb" "ret" "ros1" "rps6kb1" "slc34a2" "spns1" "strn" "tfg" "trim24" "trim33" "tubd1"]
val querySeqsDir = dir(querySeqs)
val fastq_files = gunzip(dir("s3://gmeixiong-bucket/test/A10_B002095"))
val fasta_files = convertFastq(fastq_files)
val blastdb = makeBlastDB(fasta_files)
val blastn = [dirs.Copy(blastn(blastdb, n, f), "s3://gmeixiong-bucket/blastn_test") | (n, f) <- map(querySeqsDir)]

@requires(cpu := 8, mem := 32*GiB, disk := 200*GiB)
val Main = dirs.Copy(fasta_files, "s3://gmeixiong-bucket/fasta_test") ~> dirs.Copy(blastdb, "s3://gmeixiong-bucket/blastdb_test") ~> blastn